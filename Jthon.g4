
grammar Jthon;

program:importclass*(classDef)? ;
//=====================================================================================
importclass
                :
                'import' CLASSNAME
                ;
//=====================================================================================
classDef
                :
                'class' CLASSNAME ('(' CLASSNAME ')')? '{' class_body* '}'
                ;

//=====================================================================================
class_body
                :
                varDec
                |methodDec
                |constructor
                |arrayDec ;

//=====================================================================================
varDec
                :
                type ID
                |'self'
                ;

//=====================================================================================
arrayDec
                :
                type '['forArray']' ID
                ;

forArray
                :
                INTEGER | ID
                ;
//=====================================================================================
methodDec
                :
                'def'(type|'void') ID '('parameter?')''{'(statement)*'}'
                ;
//=====================================================================================
constructor
                :
                'def' CLASSNAME '(' parameter ?')''{' ( statement)* '}'
                ;

//=====================================================================================
parameter
                :
                varDec (',' varDec)*
                ;

//=====================================================================================

statement
                :
                varDec
                |assignment
                |print_statment
                |method_call
                |return_statment
                |if_statment
                |while_statment
                |if_else_statment
                |for_statment
                ;

//=====================================================================================
return_statment
                :
                'return' exp| 'return' method_call
                ;
//=====================================================================================
//condition_list
//                :
//                condition (('or'|'and') condition)*
//                ;
//=====================================================================================
//condition
//                :
//                BOOL | prefixexp | (exp) Relational_operators (exp)
//                ;

//=====================================================================================
if_statment
                :
                'if' '(' conditionn')' '{' statement* '}'
                ;
//=====================================================================================
while_statment
                :
                'while' '(' conditionn ')' '{' statement* '}'
                ;
//=====================================================================================

if_else_statment
                :'if' '(' conditionn ')' '{' statement* '}'
                ('elif' '(' conditionn ')' '{' statement* '}')*
                'else' '{' statement* '}'
                ;
//=====================================================================================
print_statment
                :
                'print' '(' (conditionn|STRING | BOOL | INTEGER ) ')'
                //'print' '(' (prefixexp | type args |STRING | BOOL | INTEGER ) ')'
                ;

//=====================================================================================

for_statment
                :
                'for' ID 'in' ID '{' statement* '}'
                |'for' ID 'in' 'range''('INTEGER (',' INTEGER)? (',' INTEGER)? ')' '{' statement* '}'
                ;

//=====================================================================================
method_call
                :
                (prefixexp|'self') '.' ID args
                | ID args
                ;

//=====================================================================================
assignment
                :
                assignmentt
                |arrayDec EQUAL type args ('['INTEGER']')
                ;
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
conditionn
                :
                logical
                | conditionn   (',') assignmentt
                ;
logical
                :
                assignmentt
                | logical  ('and'|'or') assignmentt
                ;

assignmentt
                :
                secondLevel
                |assignmentt assignment_operators secondLevel
               ;


secondLevel
                :
                thirdLevel
                |secondLevel ('!=' | '==') thirdLevel
                ;

thirdLevel
                :
                fourthLevel
                | thirdLevel ('<' | '<=' | '>' | '>=') fourthLevel
                ;

fourthLevel
                :
                fifthLevel
                | fourthLevel ('+' | '-') fifthLevel
                ;

fifthLevel
                :
                sixLevel
                |fifthLevel ('/' | '*' | '%') sixLevel
                ;

sixLevel
                :
                seventhLevel
                |name '['INTEGER']' eightLevel
                |sixLevel '.'  seventhLevel
                ;


seventhLevel
                :
                '(' conditionn ')'
                |STRING
                |BOOL
                |FLOAT
                |INTEGER
                |CLASSNAME
                |ID ('(' conditionn* ')')?
                |CLASSNAME '(' conditionn* ')'
                |'self' '(' conditionn* ')'
                |'self' '.' conditionn
                |'none'

                ;

eightLevel
                :
                eightLevel '.' sixLevel
                |
                ;


//=====================================================================================

name:
    ID
    |CLASSNAME
    ;
exp
                :
		        'none'
		        |INTEGER
		        |FLOAT
		        |prefixexp
		        |CLASSNAME args
		        |'('exp')'
		        |ID args
		        |BOOL
		        |STRING
		        |exp Arithmetic_operator exp
		        ;
//=====================================================================================

prefixexp
                :
		        ID | prefixexp '['INTEGER']' | prefixexp '.'ID | prefixexp '.'ID args
	            ;
//=====================================================================================

args
                :
                '(' (explist)? ')'
                ;
//=====================================================================================

explist
                :
                exp (',' exp)*
                ;

//=====================================================================================


//=====================================================================================
Arithmetic_operator
                :
                '+'
                |'-'
                |'*'
                |'/'
                |'%'
                ;

//=====================================================================================
Relational_operators
                :
                '<'
                |'>'
                |'<='
                |'>='
                |'=='
                |'!='
                ;

//=====================================================================================
EQUAL
                :
                '='
                ;
//=====================================================================================
assignment_operators
                :
                EQUAL
                |'+='
                |'-='
                |'*='
                |'/='
                ;

//=====================================================================================

type
                :
                CLASSNAME
                |'int'
                |'float'
                |'string'
                |'bool'
                |'class'
                |'self'
                ;

//=====================================================================================
//=====================================================================================

INTEGER
                :
                ('1' .. '9')('0' .. '9')*
                |'0'
                ;
//=====================================================================================
CLASSNAME
                :
                [A-Z]([A-Z]|[a-z]|('0' .. '9'))*
                ;
//=====================================================================================
STRING
                :
	            '"'
	            ([A-Z]
	            |[a-z]
	            |('0' .. '9')
	            |'*' | '&'
	            |'#' | '@'
	            |'!' | ','
	            |'/' |'\\'
	            |'[' |']'
	            |'{' |'}'
	            |'~' |'.'
	            |'+' |'-'
	            |'$' |'%'
	            |'^' |'=' )*
	            '"'
	            |'"'( ~('\\'|'"') )*'"'
	            ;

//=====================================================================================
BOOL
                :
                'false'
                |'true'
                ;

//=====================================================================================
ID
                :
                ('a'..'z')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*

                ;

//=====================================================================================

FLOAT
                :
                ('0'..'9')+ '.' ('0'..'9')+
                ;
//=====================================================================================

WS              :
                [ \t\r\n\u000C]+ -> skip
                ;
//=====================================================================================
COMMENT
                :
                '#*' .*? '*#' -> skip
                ;
//=====================================================================================
LINE_COMMENT
                :
                '#' ~[\r\n]* -> skip
                ;

